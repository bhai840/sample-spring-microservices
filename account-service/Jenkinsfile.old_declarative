pipeline {

    environment {
    // Docker hub login and repository details
    
    registry = "rahulnallari/sample-spring-microservices"

    registryCredential = 'dockerhub'

    dockerImage = 'account-service/'
    
    //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables

    IMAGE = readMavenPom().getArtifactId()

    VERSION = readMavenPom().getVersion()

}

    agent any// { any

   // node {

  //      label 'slave'

   //      }

   //  }

     tools {

        maven 'localmaven'     

        //jdk 'localjdk'

        jdk 'Local_Java'
   }

    stages {

        stage ('Initialize') {

            steps {

                sh '''

                    echo "PATH = ${PATH}"

                    echo "M2_HOME = ${M2_HOME}"

                '''

            }

        }

          stage ('Build_springboot_JAR') {

            steps {

                sh 'mvn clean install' 

                //sh 'mvn -Dmaven.test.failure.ignore=true install'

                //sh "docker build -t spring-boot-web:${env.BUILD_ID} ."

                  }

            post {

                success {

                    archiveArtifacts artifacts: '**/target/*.jar' 
             

                   }

                }

          }   

            stage ('Building_docker_images') {

                 steps{

                    script {

                        dockerImage = docker.build registry

        }

      }

    } 

           stage('Push_Image') {

                 steps{

                    script {

                        docker.withRegistry( '', registryCredential ) {

                             dockerImage.push()

    

                         }

                       }

                    }

     

                 }

           

           stage ("Kubernetes_deploy") {



               steps{

                //     sh "kubectl get nodes"

                       sh '''



                            kubectl apply -f https://github.com/bhai840/SpringbootCICD/blob/master/Kubernetes/Deployment.yaml -n ${Kuberntes-NameSpace}



                            kubectl apply -f https://github.com/cvemula1/java-SpringBootapp-k8s/blob/master/Kubernetes/services.yaml -n ${Kuberntes-NameSpace}



                            kubectl apply -f https://github.com/cvemula1/java-SpringBootapp-k8s/blob/master/Kubernetes/ingress.yaml

 -n ${Kuberntes-NameSpace}



                         '''

               



            }



        }

        

     

    }

}

